import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'com.diffplug.spotless' version '5.12.5'
	id 'com.github.ben-manes.versions' version '0.38.0'
}

final boolean isLocalDevEnv = (System.getenv("CI") == null)

allprojects {
	apply plugin: 'jacoco'
	apply plugin: 'codenarc'
	apply plugin: 'pmd'

	group = 'com.streamr'
	version = '3.0.0-alpha.1'

	// https://docs.gradle.org/current/userguide/jacoco_plugin.html
	jacoco {
		toolVersion = '0.8.6'
	}
	// https://docs.gradle.org/current/userguide/codenarc_plugin.html
	codenarc {
		configFile = file("${project.rootDir}/gradle/config/codenarc/codenarc.xml")
		ignoreFailures = false
		reportFormat = 'html'
		reportsDir = file("${project.buildDir}/reports/codenarc")
		maxPriority1Violations = 1
		maxPriority2Violations = 2
		maxPriority3Violations = 4
	}
	// https://docs.gradle.org/current/userguide/pmd_plugin.html
	pmd {
		toolVersion = '6.30.0'
		consoleOutput = isLocalDevEnv
		ignoreFailures = false
		rulesMinimumPriority = 5
		ruleSets = ["${project.rootDir}/gradle/config/pmd/ruleset.xml"]
	}
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'idea'
	apply plugin: 'eclipse'

	tasks.withType(Test) {
		useJUnitPlatform {
			systemProperties = [
					'junit.jupiter.extensions.autodetection.enabled': 'true',
					'junit.jupiter.testinstance.lifecycle.default': 'per_class',
					'junit.jupiter.execution.timeout.default': '3 m',
			]
		}
		testLogging {
			events = [
					TestLogEvent.SKIPPED,
					TestLogEvent.FAILED,
			]
			exceptionFormat TestExceptionFormat.SHORT
			if (isLocalDevEnv) {
				exceptionFormat TestExceptionFormat.FULL
				events += TestLogEvent.PASSED
			}
			info {
				events = [
						TestLogEvent.PASSED,
						TestLogEvent.SKIPPED,
						TestLogEvent.FAILED,
				]
				exceptionFormat TestExceptionFormat.FULL
			}
			debug {
				events = [
						TestLogEvent.STANDARD_OUT,
						TestLogEvent.STANDARD_ERROR,
						TestLogEvent.STARTED,
						TestLogEvent.SKIPPED,
						TestLogEvent.FAILED,
						TestLogEvent.PASSED,
				]
				exceptionFormat TestExceptionFormat.FULL
			}
		}
	}
	java {
		sourceCompatibility(JavaVersion.VERSION_1_8)
		targetCompatibility(JavaVersion.VERSION_1_8)
		withJavadocJar()
		withSourcesJar()
	}
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		options.compilerArgs += [
				'-Werror',
				'-Xlint:auxiliaryclass',
				'-Xlint:cast',
				'-Xlint:classfile',
				'-Xlint:deprecation',
				'-Xlint:dep-ann',
				'-Xlint:divzero',
				'-Xlint:empty',
				'-Xlint:fallthrough',
				'-Xlint:finally',
				'-Xlint:options',
				'-Xlint:overloads',
				'-Xlint:overrides',
				'-Xlint:path',
				'-Xlint:processing',
				'-Xlint:rawtypes',
				'-Xlint:-serial',
				'-Xlint:static',
				'-Xlint:try',
				'-Xlint:unchecked',
				'-Xlint:varargs',
		]
	}
	javadoc {
		options.encoding = 'UTF-8'
		if (JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
	}
	jacocoTestReport {
		dependsOn check
		reports {
			xml.enabled false
			csv.enabled false
			html.destination file("${buildDir}/reports/coverage")
		}
	}
}
// https://github.com/diffplug/spotless/tree/main/plugin-gradle
// https://github.com/google/google-java-format
// https://google.github.io/styleguide/javaguide.html
// Enable below once ratchetFrom is removed
// compileJava.dependsOn 'spotlessApply'
spotless {
	ratchetFrom 'origin/master'
	format 'misc', {
		target '**/*.gradle', '.gitignore'

		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	java {
		target rootProject.fileTree('.') {
			include '*/src/*/java/**/*.java'
			include '*/src/*/groovy/**/*.java'
			exclude 'client/src/main/java/com/streamr/client/dataunion/contracts/**'
		}
		googleJavaFormat('1.7')
	}
}

task jacocoRootReport(type: JacocoReport) {
	dependsOn = subprojects.test
	getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	getClassDirectories().setFrom(files(subprojects.sourceSets.main.output))
	getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData))
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
	onlyIf = {
		true
	}
	doFirst {
		getExecutionData().setFrom(files(executionData.findAll {
			it.exists()
		}))
	}
}
